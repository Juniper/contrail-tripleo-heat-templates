heat_template_version: queens

description: >
  Contrail containerized Config Analytics Query Engine service

parameters:
  ContrailImageTag:
    default: 'latest'
    description: Contrail container image tag
    type: string
  DockerContrailAnalyticsQueryEngineImageName:
    description: image
    type: string
    default: "contrail-analytics-query-engine"
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

conditions:
  is_not_5_0:
    not: 
      or:
        - yaql:
            expression: $.data.split(":")[-1].matches("5\.0")
            data: {get_param: DockerContrailAnalyticsQueryEngineImageName}
        - yaql:
            expression: $.data.split(":")[-1].matches("5\.0")
            data: {get_param: ContrailImageTag}

resources:
  DockerContrailAnalyticsQueryEngineImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailAnalyticsQueryEngineImageName}

  ContrailBase:
    type: contrail-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Contrail Analytics Query Engine.
    value:
      analytics_query_engine_ports: &analytics_query_engine_ports
        - 8091
      contrail_env_file: &contrail_env_file
        "/etc/contrail/common_analytics_query_engine.env"
      docker_config:
        step_5:
          contrail_analytics_queryengine:
            image: &contrail_analytics_queryengine_image {get_attr: [DockerContrailAnalyticsQueryEngineImageNormalize, contrail_image]}
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            env_file:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_env_file]}
                - - *contrail_env_file
      host_prep_tasks:
        list_concat:
          - {get_attr: [ContrailBase, role_data, contrail_host_prep_tasks_base]}
          - - name: register contrail analytics query-engine env file
              stat:
                path: *contrail_env_file
              register: p
            - name: create contrail analytics query-engine env file
              copy:
                dest: *contrail_env_file
                content: ""
              when: not p.stat.exists
            - set_fact:
                qe_env_vars: []
          - if:
            - is_not_5_0
            - - set_fact:
                  qe_env_vars: "{{ qe_env_vars + ['NODE_TYPE=database'] }}"
            - - set_fact:
                  qe_env_vars: "{{ qe_env_vars + ['NODE_TYPE=analytics'] }}"
          - - name: write remaining contrail config env vars
              lineinfile:
                dest: *contrail_env_file
                state: present
                line: "{{ item }}"
              with_items: "{{ qe_env_vars }}"

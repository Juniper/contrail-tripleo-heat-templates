heat_template_version: queens

description: >
  Contrail CertmongerUser service

parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ContrailCA:
    default: ''
    description: CA, could be local or IPA
    type: string
  ContrailServiceCertFile:
    default: ''
    description: Path to the node's public certificate
    type: string
  ContrailServiceKeyFile:
    default: ''
    description: Path to server's/node's private key
    type: string
  ContrailCaCertFile:
    default: ''
    description: Path to CA certificate
    type: string
  DefaultCRLURL:
    default: 'http://ipa-ca/ipa/crl/MasterCRL.bin'
    description: URI where to get the CRL to be configured in the nodes.
    type: string

conditions:
  contrail_ipa_ca: {equals: [{get_param: ContrailCA}, 'IPA']}

resources:
  ContrailNetworks:
    type: OS::Heat::Value
    properties:
      value:
        - ctlplane
{%- for network in networks %}
  {%- if network.name_lower not in ( 'external', 'management', 'storage', 'storagemgmt' ) %}
        - {{network.name_lower}}
  {%- endif %}
{%- endfor %}

outputs:
  role_data:
    description: Role data for the certmonger-user service
    value:
      service_name: contrail_certmonger_user
      config_settings:
        map_merge:
          - tripleo::certmonger::ca::crl::crl_source: {get_param: DefaultCRLURL}
            contrail_certmonger_ca: {get_param: ContrailCA}
          - if:
            - contrail_ipa_ca
            - contrail_generate_service_certificates: true
              tripleo::certmonger::contrail_dirs::certificate_dir:
                yaql:
                  expression: $.data.path.rightSplit(separator => "/", maxSplits => 1)[0]
                  data:
                    path: {get_param: ContrailServiceCertFile}
              tripleo::certmonger::contrail_dirs::key_dir:
                yaql:
                  expression: $.data.path.rightSplit(separator => "/", maxSplits => 1)[0]
                  data:
                    path: {get_param: ContrailServiceKeyFile}
              contrail_certificates_specs:
                service_certificate: {get_param: ContrailServiceCertFile}
                service_key: {get_param: ContrailServiceKeyFile}
                hostname: "%{hiera('fqdn_canonical')}"
                principal: "contrail/%{hiera('fqdn_canonical')}"
                dnsnames:
                  repeat:
                    template:
                      - "%{hiera('fqdn_NETWORK')}"
                    for_each:
                      NETWORK: {get_attr: [ContrailNetworks, value]}
            - {}
      metadata_settings:
        if:
          - contrail_ipa_ca
          - repeat:
              template:
                - service: contrail
                  network: NETWORK
                  type: node
              for_each:
                NETWORK: {get_attr: [ContrailNetworks, value]}
          - null
      step_config: |
        include ::tripleo::network::contrail::certmonger_user

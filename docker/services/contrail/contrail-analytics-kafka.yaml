heat_template_version: queens

description: >
  Contrail containerized Analytics Kafka service

parameters:
  ContrailImageTag:
    default: 'latest'
    description: Contrail container image tag
    type: string
  DockerContrailKafkaImageName:
    description: image
    type: string
    default: "contrail-external-kafka"
  DockerContrailZookeeperImageName:
    description: image
    type: string
    default: "contrail-external-zookeeper"
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

conditions:
  is_not_5_0:
    not: 
      or:
        - yaql:
            expression: $.data.split(":")[-1].matches("5\.0")
            data: {get_param: DockerContrailKafkaImageName}
        - yaql:
            expression: $.data.split(":")[-1].matches("5\.0")
            data: {get_param: DockerContrailZookeeperImageName}
        - yaql:
            expression: $.data.split(":")[-1].matches("5\.0")
            data: {get_param: ContrailImageTag}

resources:
  DockerContrailKafkaImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailKafkaImageName}

  DockerContrailZookeeperImageNormalize:
    type: ../../../tools/contrail/contrail-image-normalize.yaml
    properties:
      GenericImageName: {get_param: DockerContrailZookeeperImageName}

  ContrailBase:
    type: contrail-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}
      contrail_kafka_service_name:
        if: 
          - is_not_5_0
          - 'contrail_analytics_alarm'
          - ''

outputs:
  role_data:
    description: Role data for the Contrail Analytics Kafka.
    value:
      contrail_analytics_kafka_ports:
        # zookeeper
        - 2182
        - '4888-5888'
        # kafka
        - 9092
      contrail_env_file: &contrail_env_file
        "/etc/contrail/common_analytics_kafka.env"
      docker_config:
        step_3:
          contrail_analytics_zookeeper:
            image: &contrail_analytics_zookeeper_image {get_attr: [DockerContrailZookeeperImageNormalize, contrail_image]}
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_volumes]}
                - - analytics_zookeeper:/data
                  - analytics_zookeeper:/datalog
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            env_file:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_env_file]}
                - - *contrail_env_file
        step_4:
          contrail_analytics_kafka:
            image: &contrail_analytics_kafka_image {get_attr: [DockerContrailKafkaImageNormalize, contrail_image]}
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            env_file:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_env_file]}
                - - *contrail_env_file

      host_prep_tasks:
        list_concat:
          - {get_attr: [ContrailBase, role_data, contrail_host_prep_tasks_base]}
          - - name: register create contrail analytics kafka env file
              stat:
                path: *contrail_env_file
              register: p
            - name: create contrail analytics kafka env file
              copy:
                dest: *contrail_env_file
                content: ""
              when: not p.stat.exists
            - set_fact:
                kafka_env_vars:
                  - ZOOKEEPER_PORTS=4888:5888
                  - ZOOKEEPER_PORT=2182
          - if:
            - is_not_5_0
            - - set_fact:
                  kafka_env_vars: "{{ kafka_env_vars + ['NODE_TYPE=analytics-alarm'] }}"
            - - set_fact:
                  kafka_env_vars: "{{ kafka_env_vars + ['NODE_TYPE=database'] }}"
          - - name: write remaining contrail config env vars
              lineinfile:
                dest: *contrail_env_file
                state: present
                line: "{{ item }}"
              with_items: "{{ kafka_env_vars }}"

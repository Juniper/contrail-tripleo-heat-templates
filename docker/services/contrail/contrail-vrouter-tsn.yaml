heat_template_version: queens

description: >
  Contrail containerized Vrouter service

parameters:
  DockerContrailVrouterAgentImageName:
    description: image
    type: string
    default: "contrail-vrouter-agent"
  NeutronMetadataProxySharedSecret:
    description: Metadata Secret
    type: string
    hidden: true
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

resources:
  ContainersCommon:
    type: ../containers-common.yaml

  ContrailBase:
    type: contrail-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Contrail Vrouter service.
    value:
      service_name: contrail_vrouter
      config_settings:
        map_merge:
          - get_attr: [ContrailBase, role_data, config_settings]
          - contrail::vrouter::metadata_proxy_shared_secret: {get_param: NeutronMetadataProxySharedSecret}
            tripleo.contrail_vrouter.firewall_rules:
              '111 contrail_vrouter_8085_8097':
                dport:
                  - 8085
                  - 8097
      docker_config:
        step_2:
          get_attr: [ContrailBase, role_data, docker_config, step_2]
        step_5:
          contrail_vrouter_agent_nodemgr:
            image: {get_attr: [ContrailBase, role_data, contrail_nodemgr_image_name]}
            environment:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_env]}
                - - NODE_TYPE=vrouter
            net: host
            detach: true
            user: root
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_volumes]}
                - - /var/run/docker.sock:/var/run/docker.sock
            env_file:
              - /etc/contrail/common_vrouter.env
          contrail_vrouter_agent:
            image: &contrail_vrouter_agent_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailVrouterAgentImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: true
            detach: true
            user: root
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_volumes]}
                - - /dev:/dev
                  - /etc/sysconfig/network-scripts:/etc/sysconfig/network-scripts
                  - /lib/modules:/lib/modules
                  - /var/run:/var/run
                  - /var/lib/contrail/ports
            env_file:
              - /etc/contrail/common_vrouter.env
      host_prep_tasks:
        - name: create contrail directories
          file:
            path: "{{ item }}"
            state: directory
            recurse: yes
          with_items:
            - /var/log/containers/contrail
            - /etc/contrail/ssl
        - name: register /etc/contrail/common_vrouter.env
          stat:
            path: /etc/contrail/common_vrouter.env
          register: p
        - name: create /etc/contrail/common_vrouter.env
          copy:
            dest: /etc/contrail/common_vrouter.env
            content: ""
          when: not p.stat.exists
        - name: get metadata secret
          shell: hiera -c /etc/puppet/hiera.yaml contrail::vrouter::metadata_proxy_shared_secret
          register: contrail_metadata_secret
        - name: get contrail config database node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_database_node_ips
          register: contrail_config_database_node_ips_list
        - name: turn contrail config db ips into json
          set_fact:
            contrail_config_database_node_ips_json: "{{ contrail_config_database_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_config_database_node_ips_string: "{{ contrail_config_database_node_ips_json | join(',') }}"
        - name: get contrail config node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_config_node_ips
          register: contrail_config_node_ips_list
        - name: turn contrail config ips into json
          set_fact:
            contrail_config_node_ips_json: "{{ contrail_config_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_config_node_ips_string: "{{ contrail_config_node_ips_json | join(',') }}"
        - name: get contrail control node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_control_node_ips
          register: contrail_control_node_ips_list
        - name: turn contrail control ips into json
          set_fact:
            contrail_control_node_ips_json: "{{ contrail_control_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_control_node_ips_string: "{{ contrail_control_node_ips_json | join(',') }}"
        - name: get contrail analytics node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_analytics_node_ips
          register: contrail_analytics_node_ips_list
        - name: turn contrail analytics ips into json
          set_fact:
            contrail_analytics_node_ips_json: "{{ contrail_analytics_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_analytics_node_ips_string: "{{ contrail_analytics_node_ips_json | join(',') }}"
        - name: write contrail config node ips to environment file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^CONFIG_NODES.*' line="CONFIG_NODES={{ contrail_config_node_ips_string }}" state=present
        - name: write contrail control  node ips to environment file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^CONTROL_NODES.*' line="CONTROL_NODES={{ contrail_control_node_ips_string }}" state=present
        - name: write contrail config db node ips to environment file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^CONFIGDB_NODES.*' line="CONFIGDB_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail config db node ips to environment file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^ZOOKEEPER_NODES.*' line="ZOOKEEPER_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail config rmq node ips to environment file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^RABBITMQ_NODES.*' line="RABBITMQ_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail analytics node ips to environment file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^ANALYTICS_NODES.*' line="ANALYTICS_NODES={{ contrail_analytics_node_ips_string }}" state=present
        - name: write remaining contrail config env cars
          lineinfile: dest=/etc/contrail/common_vrouter.env line="{{ item }}" state=present
          with_items:
            - RABBITMQ_NODE_PORT=5673
            - METADATA_PROXY_SECRET={{ contrail_metadata_secret.stdout }}

        - name: get dmi
          shell: |
                 #!/bin/sh
                 dmidecode --s system-uuid | awk 'match($0, /[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}/) { print substr($0, RSTART, RLENGTH) }'
          register: dmi

        - name: set dmi fact
          set_fact:
            dmi_uuid: "{{ dmi.stdout }}"

        - name: get contrail_settings
          shell: "hiera -c /etc/puppet/hiera.yaml contrail_settings ::uuid={{ dmi_uuid }} | sed 's/=>/:/g'"
          register: contrail_settings_string

        - name: turn contrail_settings into json
          set_fact:
            contrail_settings: "{{ contrail_settings_string.stdout | from_json }}"
          when:
          - contrail_settings_string.stdout is defined
          - contrail_settings_string.stdout != "nil"

        - name: write contrail settings to file
          lineinfile: dest=/etc/contrail/common_vrouter.env regexp="^{{ item.key }}.*" line="{{ item.key }}={{ item.value }}" state=present
          with_dict: "{{ contrail_settings }}"
          when: contrail_settings is defined
          ignore_errors: yes

      metadata_settings:
        get_attr: [ContrailBase, role_data, metadata_settings]

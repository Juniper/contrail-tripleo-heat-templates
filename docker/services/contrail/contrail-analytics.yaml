heat_template_version: queens

description: >
  Contrail containerized Config Analytics service

parameters:
  DockerContrailAnalyticsApiImageName:
    description: image
    type: string
    default: "contrail-analytics-api"
  DockerContrailAnalyticsQueryEngineImageName:
    description: image
    type: string
    default: "contrail-analytics-query-engine"
  DockerContrailAnalyticsCollectorImageName:
    description: image
    type: string
    default: "contrail-analytics-collector"
  DockerContrailAnalyticsAlarmGenImageName:
    description: image
    type: string
    default: "contrail-analytics-alarm-gen"
  DockerContrailAnalyticsTopologyImageName:
    description: image
    type: string
    default: "contrail-analytics-topology"
  DockerContrailAnalyticsSnmpCollectorImageName:
    description: image
    type: string
    default: "contrail-analytics-snmp-collector"
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

resources:
  ContainersCommon:
    type: ../containers-common.yaml

  ContrailBase:
    type: contrail-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  ContrailRedis:
    type: contrail-redis.yaml

outputs:
  role_data:
    description: Role data for the Contrail Analytics service.
    value:
      service_name: contrail_analytics
      config_settings:
        map_merge:
          - get_attr: [ContrailBase, role_data, config_settings]
      service_config_settings:
        map_merge:
          - {get_attr: [ContrailBase, role_data, service_config_settings]}
          - haproxy:
              tripleo.contrail_analytics.haproxy_endpoints:
                contrail_analytics:
                  map_merge:
                    - public_ssl_port: 18081
                      internal_ip: "%{hiera('contrail_analytics_vip')}"
                      service_port: 8081
                      service_network: {get_param: [ServiceNetMap, ContrailAnalyticsNetwork]}
                    - {get_attr: [ContrailBase, role_data, haproxy_config_settings]}
      docker_config:
        step_2:
          get_attr: [ContrailBase, role_data, docker_config, step_2]
        step_4:
          get_attr: [ContrailRedis, role_data, docker_config, step_4]
        step_5:
          contrail_analytics_nodemgr:
            image: {get_attr: [ContrailBase, role_data, contrail_nodemgr_image_name]}
            environment:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_env]}
                - - NODE_TYPE=analytics
            net: host
            detach: true
            user: root
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContrailBase, role_data, contrail_base_volumes]}
                - - /var/run/docker.sock:/var/run/docker.sock
            env_file:
              - /etc/contrail/common_analytics.env
          contrail_anlytics_api:
            image: &contrail_analytics_api_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailAnalyticsApiImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: false
            detach: true
            restart: always
            user: root
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            env_file:
              - /etc/contrail/common_analytics.env
          contrail_analytics_queryengine:
            image: &contrail_analytics_queryengine_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailAnalyticsQueryEngineImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            env_file:
              - /etc/contrail/common_analytics.env
          contrail_analytics_collector:
            image: &contrail_analytics_collector_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailAnalyticsCollectorImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            env_file:
              - /etc/contrail/common_analytics.env
          contrail_analytics_alarmgen:
            image: &contrail_analytics_alarmgen_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailAnalyticsAlarmGenImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            env_file:
              - /etc/contrail/common_analytics.env
          contrail_analytics_topology:
            image: &contrail_analytics_topology_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailAnalyticsTopologyImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            env_file:
              - /etc/contrail/common_analytics.env
          contrail_analytics_snmp_collector:
            image: &contrail_analytics_snmp_collector_image
              list_join:
                - ''
                - - {get_attr: [ContrailBase, role_data, contrail_registry]}
                  - '/'
                  - {get_param: DockerContrailAnalyticsSnmpCollectorImageName}
                  - ':'
                  - {get_attr: [ContrailBase, role_data, contrail_imagetag]}
            environment:
              get_attr: [ContrailBase, role_data, contrail_base_env]
            net: host
            privileged: false
            detach: true
            user: root
            restart: always
            volumes:
              get_attr: [ContrailBase, role_data, contrail_base_volumes]
            env_file:
              - /etc/contrail/common_analytics.env
      host_prep_tasks:
        - name: create contrail directories
          file:
            path: "{{ item }}"
            state: directory
            recurse: yes
          with_items:
            - /var/log/containers/contrail
            - /etc/contrail/ssl
        - name: register /etc/contrail/common_analytics.env
          stat:
            path: /etc/contrail/common_analytics.env
          register: p
        - name: create /etc/contrail/common_analytics.env
          copy:
            dest: /etc/contrail/common_analytics.env
            content: ""
          when: not p.stat.exists
        - name: get service_config
          set_fact:
            service_configs: "{{ lookup('file', '/etc/puppet/hieradata/service_configs.json') | from_json }}"
        - name: get contrail_settings
          set_fact:
            contrail_settings: "{{ service_configs.contrail_settings }}"
          when: service_configs is defined
        - name: write contrail settings to file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp="^{{ item.key }}.*" line="{{ item.key }}={{ item.value }}" state=present
          with_dict: "{{ contrail_settings }}"
          when: contrail_settings is defined
        - name: get contrail analytics database node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_analytics_database_node_ips
          register: contrail_analytics_database_node_ips_list
        - name: turn contrail analytics db ips into json
          set_fact:
            contrail_analytics_database_node_ips_json: "{{ contrail_analytics_database_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_analytics_database_node_ips_string: "{{ contrail_analytics_database_node_ips_json | join(',') }}"
        - name: get contrail config database node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_database_node_ips
          register: contrail_config_database_node_ips_list
        - name: turn contrail config db ips into json
          set_fact:
            contrail_config_database_node_ips_json: "{{ contrail_config_database_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_config_database_node_ips_string: "{{ contrail_config_database_node_ips_json | join(',') }}"
        - name: get contrail config node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_config_node_ips
          register: contrail_config_node_ips_list
        - name: turn contrail config ips into json
          set_fact:
            contrail_config_node_ips_json: "{{ contrail_config_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_config_node_ips_string: "{{ contrail_config_node_ips_json | join(',') }}"
        - name: get contrail analytics node ips
          shell: hiera -c /etc/puppet/hiera.yaml contrail_analytics_node_ips
          register: contrail_analytics_node_ips_list
        - name: turn contrail analytics ips into json
          set_fact:
            contrail_analytics_node_ips_json: "{{ contrail_analytics_node_ips_list.stdout | from_json }}"
        - name: turn json into comma separated string
          set_fact:
            contrail_analytics_node_ips_string: "{{ contrail_analytics_node_ips_json | join(',') }}"
        - name: write contrail config node ips to environment file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp='^CONFIG_NODES.*' line="CONFIG_NODES={{ contrail_config_node_ips_string }}" state=present
        - name: write contrail analytics db node ips to environment file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp='^ANALYTICSDB_NODES.*' line="ANALYTICSDB_NODES={{ contrail_analytics_database_node_ips_string }}" state=present
        - name: write contrail config db node ips to environment file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp='^CONFIGDB_NODES.*' line="CONFIGDB_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail config db node ips to environment file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp='^ZOOKEEPER_NODES.*' line="ZOOKEEPER_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail config rmq node ips to environment file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp='^RABBITMQ_NODES.*' line="RABBITMQ_NODES={{ contrail_config_database_node_ips_string }}" state=present
        - name: write contrail analytics node ips to environment file
          lineinfile: dest=/etc/contrail/common_analytics.env regexp='^ANALYTICS_NODES.*' line="ANALYTICS_NODES={{ contrail_analytics_node_ips_string }}" state=present
        - name: write remaining contrail config env cars
          lineinfile: dest=/etc/contrail/common_analytics.env line="{{ item }}" state=present
          with_items:
            - RABBITMQ_NODE_PORT=5673

      metadata_settings:
        get_attr: [ContrailBase, role_data, metadata_settings]

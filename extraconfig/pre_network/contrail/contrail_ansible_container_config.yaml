---
- name: Call Contrail init container for compute/dpdk/tls nodes
  connection: local
  hosts: localhost

  tasks:

    - name: contrail settings
      set_fact:
        contrail_settings_env_vars: "{{ _CONTRAIL_SETTINGS_ | default({}) }}"

    - name: update contrail settings if nodedata is provided
      block:
      - name: get system dmi code
        shell: |
                #!/bin/sh
                dmidecode --s system-uuid | awk 'match($0, /[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}/) { print substr($0, RSTART, RLENGTH) }'
        register: dmi

      - name: set dmi fact
        set_fact:
          dmi_uuid: "{{ dmi.stdout }}"

      - name: set nodedata
        set_fact:
          nodedata: "{{ _NODEDATA_[dmi_uuid] }}"
        when: _NODEDATA_[dmi_uuid] is defined

      - name: update contrail settings with node data values
        set_fact:
          contrail_settings_env_vars: "{{ contrail_settings_env_vars | combine({item.key: item.value}) }}"
        with_dict: "{{ nodedata['contrail_settings'] }}"
        when:
          - nodedata is defined
          - nodedata['contrail_settings'] is defined

      when: _NODEDATA_ is defined

    - name: create /var/lib/contrail
      file:
        path: "/var/lib/contrail"
        state: directory

    - name: prepare /etc/modprobe.d/vrouter.conf
      lineinfile:
        dest: /etc/modprobe.d/vrouter.conf
        regexp: "^options vrouter"
        line: "options vrouter {{ _CONTRAIL_VROUTER_MODULE_OPTS_ }}"
        create: yes
      when: _CONTRAIL_VROUTER_MODULE_OPTS_ is defined and _CONTRAIL_VROUTER_MODULE_OPTS_ != ''

    - name: contrail vrouter plugin init container if exists
      block:
        - name: remove contrail vrouter plugin init container if exists
          shell: podman container rm --force"{{ _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_NAME_ }}"
          ignore_errors: yes

        - name: create contrail vrouter plugin init container
          shell: podman run -t --name "{{ _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_NAME_ }}" --privileged -v /lib/modules:/lib/modules -v /usr/src:/usr/src "{{ _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_ }}"
      when:
        - _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_NAME_ is defined and _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_NAME_ != ''
        - _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_ is defined and _CONTRAIL_VROUTER_PLUGIN_INIT_IMAGE_ != ''

    - name: start contrail dpdk init container
      block:

        - set_fact:
              dpdk_init_env_args: ''

        - name: prepare podman env args
          set_fact:
            dpdk_init_env_args: "{{ dpdk_init_env_args }}  -e  {{ item.key}}={{ item.value }}"
          loop: "{{ contrail_settings_env_vars | dict2items}}"

        - name: pull contrail vrouter dpdk agent container
          shell: podman pull "{{ _CONTRAIL_VROUTER_AGENT_DPDK_IMAGE_ }}"

        - name: remove contrail dpdk init container if exists
          shell: podman container rm --force "{{ _CONTRAIL_VROUTER_INIT_IMAGE_NAME_ }}"
          ignore_errors: yes

        - name: create contrail dpdk init container
          shell: |
            podman run  -t --name {{ _CONTRAIL_VROUTER_INIT_IMAGE_NAME_ }} --privileged \
              -v /dev:/dev -v /etc/sysconfig/network-scripts:/etc/sysconfig/network-scripts -v /lib/modules:/lib/modules -v /bin:/host/bin \
              -e AGENT_MODE: dpdk -e CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE={{ _CONTRAIL_VROUTER_AGENT_DPDK_IMAGE_ }} \
              -e CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME={{ _CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME_ }} \
              -e CONTRAIL_VROUTER_AGENT_CONTAINER_NAME=contrail_vrouter_agent \
              -e DPDK_COMMAND_ADDITIONAL_ARGS={{ _CONTRAIL_DPDK_COMMAND_ADDITIONAL_ARGS_ }} \
              {{ dpdk_init_env_args }} {{ _CONTRAIL_VROUTER_INIT_IMAGE_ }}
      when: _IS_DPDK_ is defined and _IS_DPDK_ != ''

    - name: start contrail vrouter init container
      block:
        - set_fact:
            vrouter_init_env_vars:
              CONTRAIL_VROUTER_AGENT_CONTAINER_NAME: contrail_vrouter_agent

        - set_fact:
            vrouter_init_env_vars: "{{ vrouter_init_env_vars | combine({item.key: item.value}) }}"
          with_dict: "{{ contrail_settings_env_vars }}"
          when: contrail_settings_env_vars is defined

        - set_fact:
            init_env_args: ''

        - name: prepare podman env args
          set_fact:
            init_env_args: "{{ init_env_args }}  -e  {{ item.key}}='{{ item.value }}'"
          loop: "{{ vrouter_init_env_vars | dict2items}}"

        - name: remove contrail init container if exists
          shell: podman container rm --force "{{ _CONTRAIL_VROUTER_INIT_IMAGE_NAME_ }}"
          ignore_errors: yes


        - name: create vrouter init container
          shell: |
            podman run -t --name {{ _CONTRAIL_VROUTER_INIT_IMAGE_NAME_ }} --privileged \
              -v /dev:/dev -v /etc/sysconfig/network-scripts:/etc/sysconfig/network-scripts \
              -v /lib/modules:/lib/modules -v /bin:/host/bin \
              {{ init_env_args }} {{ _CONTRAIL_VROUTER_INIT_IMAGE_ }}


      when: _IS_DPDK_ is undefined or _IS_DPDK_ == ''


---
- name: Configuration to be applied before rebooting the node
  connection: local
  hosts: localhost

  tasks:
    # Kernel Args Configuration
    - name: init init kernel_arg_list
      set_fact:
        kernel_arg_list: []
    - name: init init kernel_arg_list if _KERNEL_ARGS_  defined
      set_fact:
        kernel_arg_list: "{{ _KERNEL_ARGS_.split() }}"
      when: _KERNEL_ARGS_ | default("") != ""
    - name: set kernel args if sriov of vfio-pci dpdk driver
      when: (_CONTRAIL_DPDK_DRIVER_ | default("") == "vfio-pci") or (_CONTRAIL_SRIOV_NUM_VFS_ | default("") != "")
      block:
        - name: check if AMD processor
          shell: grep -qi AMD /proc/cpuinfo && echo true || echo false
          register: is_amd
        - name: set AMD cpu type
          when: is_amd.stdout | bool
          set_fact:
            cpu_type: 'amd'
        - name: set Intel cpu type
          when: not is_amd.stdout | bool
          set_fact:
            cpu_type: 'intel'
        - name: set kernel iommu args
          set_fact:
            kernel_arg_list: "{{ kernel_arg_list }} + [ '{{ item }}' ]"
          when: item not in kernel_arg_list
          with_items:
            - "iommu=pt"
            - "{{ cpu_type }}_iommu=on"
    - name: set kernel 1GB hugepage arg
      set_fact:
        kernel_arg_list: "{{ kernel_arg_list }} + [ 'default_hugepagesz=1GB hugepagesz=1G hugepages={{ _CONTRAIL_HUGEPAGES_1GB_ }}' ]"
      when: _CONTRAIL_HUGEPAGES_1GB_ | default("") != ""
    - name: add kernel 2MB hugepage arg if set
      set_fact:
        kernel_arg_list: "{{ kernel_arg_list }} + [ 'hugepagesz=2M hugepages={{ _CONTRAIL_HUGEPAGES_2MB_ }}' ]"
      when:
        # if 1GB is disabled then 2mb are allocated via sysctl 
        - _CONTRAIL_HUGEPAGES_1GB_ | default("") != ""
        - _CONTRAIL_HUGEPAGES_2MB_ | default("") != ""
    - debug:
        msg: "kernel_arg_list: '{{ kernel_arg_list }}'"
    - name: convert kernel_arg_list to string
      set_fact:
        kernel_arg_list: "{{ kernel_arg_list | join(' ') }}"
    - debug:
        msg: "kernel_arg_list: '{{ kernel_arg_list }}'"
    - name: apply kernel arg list if provided
      become: true
      when: kernel_arg_list != ""
      block:
        - name: Get current the command line args of the node
          command: cat /proc/cmdline
          register: cmdline
        - debug:
            msg: "current kernel args /proc/cmdline: '{{ cmdline.stdout_lines[0] }}'"
        - name: apply kernel arg list if there is no in current kernel cmd line
          when: kernel_arg_list not in cmdline.stdout_lines[0]
          block:
            - name: set default grub file
              set_fact:
                default_grub_config: "/etc/default/grub"
            # https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/sec-customizing_the_grub_2_configuration_file
            # #25.5.2
            - name: set uefi target grub file
              set_fact:
                uefi_grub_config: "/boot/efi/EFI/redhat/grub.cfg"
            - name: check if EFI config exists
              stat:
                path: "{{ uefi_grub_config }}"
              register: efi_file_rc
            - name: set target grub file for uefi
              set_fact:
                target_grub_config: "{{ uefi_grub_config }}"
              when:
                - efi_file_rc.stat.exists == true
            - name: set target grub file for bios
              set_fact:
                target_grub_config: "/boot/grub2/grub.cfg"
              when:
                - efi_file_rc.stat.exists == false
            - name: Ensure the kernel args ( {{ kernel_arg_list }} ) is present as TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS
              lineinfile:
                dest: "{{ default_grub_config }}"
                regexp: '^TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS.*'
                insertafter: '^GRUB_CMDLINE_LINUX.*'
                line: 'TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS=" {{ kernel_arg_list }} "'
            - name: Add TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS to the GRUB_CMDLINE_LINUX parameter
              lineinfile:
                dest: "{{ default_grub_config }}"
                line: 'GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX:+$GRUB_CMDLINE_LINUX }${TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS}"'
                insertafter: '^TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS.*'
            - name: Generate grub config file
              command: "grub2-mkconfig -o {{ target_grub_config }}"
            - name: Set reboot required fact
              set_fact:
                reboot_required: true

    - name: update hugepages mountpoints if 1GB is enabled
      when:
        - _CONTRAIL_HUGEPAGES_1GB_ | default("") != ""
      become: true
      block:
        - name: create hugepage devs 1G
          file:
            path: "/dev/hugepages1G"
            state: directory
        - name: create fstab entries for 1G
          mount:
            path: "/dev/hugepages1G"
            src: none
            fstype: hugetlbfs
            opts: "pagesize=1G"
            state: present
        # if 1gb is disabled the n default /dev/hugepages is to be used for 2MB
        - name: update hugepages mountpoints if 2MB is enabled
          when:
            - _CONTRAIL_HUGEPAGES_2MB_ | default("") != ""
          become: true
          block:
            - name: create hugepage devs 2M
              file:
                path: "/dev/hugepages2M"
                state: directory
            - name: create fstab entries for 2M
              mount:
                path: "/dev/hugepages2M"
                src: none
                fstype: hugetlbfs
                opts: "pagesize=2M"
                state: present

    # Tune-d Configuration
    - name: Get active tuned profile and set if requested one
      when: _TUNED_PROFILE_NAME_ | default("") != ""
      become: true
      block:
        - name: Get the active tuned profile
          command: tuned-adm active
          register: tuned_active_profile
        - name: Set tuned profile
          when: _TUNED_PROFILE_NAME_ not in tuned_active_profile.stdout_lines[0]
          block:
            - name: Tune-d Configuration
              lineinfile:
                dest: /etc/tuned/{{ _TUNED_PROFILE_NAME_ }}-variables.conf
                regexp: '^isolated_cores=.*'
                line: 'isolated_cores={{ _TUNED_CORES_ }}'
              when: _TUNED_CORES_ | default("") != ""
            - name: Tune-d profile activation
              shell: tuned-adm profile {{ _TUNED_PROFILE_NAME_ }}
            - name: Set reboot required fact
              set_fact:
                reboot_required: true

    - name: Create a temp file to identify if reboot is required or not
      file:
        path: "/tmp/kernel_args_reboot_required.ansible"
        state: touch
      when: reboot_required is defined and reboot_required

---
- name: Configuration to be applied puppet configuration started
  connection: local
  hosts: localhost
  tasks:
    - name: Ensure docker service is run
      systemd:
        state: started
        name: docker
        enabled: yes

    - name: create contrail containers common directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: yes
      with_items:
        - /var/log/containers/contrail
        - /etc/contrail

    - name: create contrail containers ssl directories
      file:
        path: "{{ item.split('/')[0:-1] | join('/') }}"
        state: directory
        seuser: 'system_u'
        serole: 'object_r'
        setype: 'cert_t'
      with_items:
        - "{{ _SERVER_KEYFILE_ }}"
        - "{{ _SERVER_CERTFILE_ }}"
      when:
        - _SERVER_KEYFILE_ is defined
        - _SERVER_CERTFILE_ is defined
        - _SERVER_KEYFILE_ != ""
        - _SERVER_CERTFILE_ != ""

    - name: remove node-init container if exists
      docker_container:
        name: "{{ _CONTRAIL_NODE_INIT_IMAGE_NAME_ }}"
        state: absent
      ignore_errors: yes

    - set_fact:
        ssl_enable: "{{ _SSL_ENABLE_ | default('false')}} | bool"

    - set_fact:
        node_init_volumes:
          - /dev:/dev
          - /usr/bin:/host/usr/bin
          - /etc/sysctl.d:/etc/sysctl.d
          - /var/crashes:/var/crashes
          - /var/log/containers/contrail:/var/log/contrail
          - /var/run:/var/run
          - /tmp/:/tmp/

    - set_fact:
        node_init_env_vars:
          INSTALL_PUPPET: "{{ _INSTALL_PUPPET_ }}"
          CONTRAIL_STATUS_IMAGE: "{{ _CONTRAIL_STATUS_IMAGE_ }}"

    - name: Add SSL folder for self-signed cert management
      block:
        - set_fact:
            node_init_volumes: "{{ node_init_volumes + ['/etc/contrail/ssl:/etc/contrail/ssl'] }}"

        - set_fact:
            node_init_env_vars: "{{ node_init_env_vars | combine({item.key: item.value}) }}"
          with_items:
            - { key: SSL_ENABLE, value: "{{ _SSL_ENABLE_ }}" }
            - { key: SERVER_KEYFILE, value: "{{ _SERVER_KEYFILE_ }}" }
            - { key: SERVER_CERTFILE, value: "{{ _SERVER_CERTFILE_ }}" }
            - { key: SERVER_CA_CERTFILE, value: "{{ _SERVER_CA_CERTFILE_ }}" }
            - { key: SERVER_CA_KEYFILE, value: "{{ _SERVER_CA_KEYFILE_ }}" }
      when:
        - ssl_enable
        - _SERVER_CA_ != 'IPA'

    - name: Add SSL folder for IPA cert management
      block:
        - set_fact:
            node_init_volumes: "{{ node_init_volumes + ['/etc/contrail/ssl:/etc/contrail/ssl:ro'] }}"

        - set_fact:
            node_init_env_vars: "{{ node_init_env_vars | combine({item.key: item.value}) }}"
          with_items:
            - { key: SERVER_KEYFILE, value: "{{ _SERVER_KEYFILE_ }}" }
            - { key: SERVER_CERTFILE, value: "{{ _SERVER_CERTFILE_ }}" }
            - { key: SERVER_CA_CERTFILE, value: "{{ _SERVER_CA_CERTFILE_ }}" }
      when:
        - ssl_enable
        - _SERVER_CA_ == 'IPA'

    - name: create node-init container
      docker_container:
        name: "{{ _CONTRAIL_NODE_INIT_IMAGE_NAME_ }}"
        image: "{{  _CONTRAIL_NODE_INIT_IMAGE_ }}"
        detach: no
        privileged: yes
        network_mode: host
        pid_mode: host
        user: root
        volumes: "{{ node_init_volumes }}"
        env: "{{ node_init_env_vars }}"

    - set_fact:
        install_puppet: "{{ _INSTALL_PUPPET_ }} | bool"

    - name: Setup Contrail Tripleo Puppet
      block:
        - name: sleep for 5 sec (looks like a race condition between docker execution and next ansible step)
          shell: "sleep 5"

        - name: Lookup Contrail RPM files
          find:
            paths: "/tmp"
            patterns: "contrail-tripleo-puppet*.rpm"
          register: rpm_files

        - name: debug rpm files
          debug:
            msg: "{{ rpm_files.files }}"

        - set_fact:
            rpm_list: "{{ rpm_files.files | map(attribute='path') | list}}"

        - name: debug rpm list
          debug:
            msg: "{{ rpm_list }}"

        - name: Installing the rpm files
          yum:
            name: "{{ rpm_list }}"
            state: present

        - set_fact:
            puppet_module_dir: "/usr/share/openstack-puppet/modules/tripleo/"

        - set_fact:
            contrail_module_dir: "{{ puppet_module_dir }}/manifests/network/contrail"

        - set_fact:
            contrail_puppet_setup_dir: "/usr/share/contrail-tripleo-puppet"

        - name: Check contrail tripleo puppet module exists.
          stat:
            path: "{{ contrail_module_dir }}"
          register: file_details

        - name: Check contrail tripleo puppet org module exists.
          stat:
            path: "{{ contrail_module_dir }}.org"
          register: file_details_org

        - name: Rename old contrail-tripleo-puppet module in tripleo
          shell: "mv {{ contrail_module_dir }} {{ contrail_module_dir }}.org"
          when:
            - file_details.stat.exists
            - not file_details_org.stat.exists

        - name: Check contrail tripleo puppet module was installed.
          stat:
            path: "{{ contrail_puppet_setup_dir }}"
          register: file_details

        - name: Sync contrail-tripleo-puppet module into tripleo
          shell: "rsync -a {{ contrail_puppet_setup_dir }}/ {{ puppet_module_dir }}"
          when: file_details.stat.exists

      when: install_puppet

    - name: Setup nodedata
      block:
      - name: get system dmi code
        shell: |
               #!/bin/sh
               dmidecode --s system-uuid | awk 'match($0, /[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}/) { print substr($0, RSTART, RLENGTH) }'
        register: dmi

      - name: set dmi fact
        set_fact:
          dmi_uuid: "{{ dmi.stdout }}"

      - name: set nodedata
        set_fact:
          nodedata: "{{ _NODEDATA_[dmi_uuid] }}"
        when: _NODEDATA_[dmi_uuid] is defined

      - name: write nodedata
        copy:
          dest: "/etc/puppet/hieradata/{{ dmi_uuid }}.json"
          content: "{{ nodedata }}"
        when: nodedata is defined

      when: _NODEDATA_ is defined

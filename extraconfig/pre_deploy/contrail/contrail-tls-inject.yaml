heat_template_version: rocky

description: >
  This template prepares the Contrail nodes to use TLS.
  It performs required certs injection.

# NOTE: You don't need to pass the parameter explicitly from the
# parent template, it can be specified via the parameter_defaults
# in the resource_registry instead, if you want to override the default
# and/or share values with other templates in the tree.
parameters:
  server:
    type: string
  ContrailServiceCertFile:
    default: ''
    description: Path to the node's public certificate
    type: string
  ContrailServiceCert:
    default: ''
    description:  Contrail node certificate.
                  Useful for a case when certificates are
                  generated outside the cluster by a 3-party approach.
                  It is to be set individually fpr each node via
                  hiera node specific approach.
    type: string
  ContrailServiceKeyFile:
    default: ''
    description: Path to server's/node's private key
    type: string
  ContrailServiceKey:
    default: ''
    description:  Contrail node private key.
                  Useful for a case when certificates are
                  generated outside the cluster by a 3-party approach.
                  It is to be set individually fpr each node via
                  hiera node specific approach.
    type: string
  ContrailCaCertFile:
    default: ''
    description: Path to CA certificate
    type: string
  ContrailCaCert:
    default: ''
    description: Content of CA certificate
    type: string
    hidden: true
  ContrailCaKeyFile:
    default: ''
    description: Path to CA private key
    type: string
  ContrailCaKey:
    default: ''
    description: Content of CA private key
    type: string
    hidden: true

conditions:
  contrail_cert_provided:
    not:
      or:
        - {equals: [{get_param: ContrailServiceCertFile}, '']}
        - {equals: [{get_param: ContrailServiceCert}, '']}
        - {equals: [{get_param: ContrailServiceKeyFile}, '']}
        - {equals: [{get_param: ContrailServiceKey}, '']}
  contrail_cacert_provided:
    not:
      or:
        - {equals: [{get_param: ContrailCaCertFile}, '']}
        - {equals: [{get_param: ContrailCaCert}, '']}
  contrail_cakey_provided:
    not:
      or:
        - {equals: [{get_param: ContrailCaKeyFile}, '']}
        - {equals: [{get_param: ContrailCaKey}, '']}
  contrail_tls_inject:
    or:
      - contrail_cert_provided
      - contrail_cacert_provided
      - contrail_cakey_provided

resources:
  ContrailTlsInjectConfig:
    type: OS::Heat::SoftwareConfig
    condition: contrail_tls_inject
    properties:
      group: script
      inputs:
        - name: path
        - name: content
        - name: mode
      outputs:
        - name: md5sum
      config: |
        #!/bin/sh
        set -e
        mkdir -p $(dirname ${path})
        cat > ${path} << EOF
        ${content}
        EOF
        chmod ${mode} ${path}
        chown root:root ${path}
        md5sum ${path} > ${heat_outputs_path}.md5sum

  ContrailCertDeployment:
    type: OS::Heat::SoftwareDeployment
    condition: contrail_cert_provided
    properties:
      name: ContrailCertDeployment
      config: {get_resource: ContrailTlsInjectConfig}
      server: {get_param: server}
      input_values:
        path: {get_param: ContrailServiceCertFile}
        content: {get_param: ContrailServiceCert}
        mode: '0444'

  ContrailKeyDeployment:
    type: OS::Heat::SoftwareDeployment
    condition: contrail_cert_provided
    properties:
      name: ContrailKeyDeployment
      config: {get_resource: ContrailTlsInjectConfig}
      server: {get_param: server}
      input_values:
        path: {get_param: ContrailServiceKeyFile}
        content: {get_param: ContrailServiceKey}
        mode: '0400'

  ContrailCaCertDeployment:
    type: OS::Heat::SoftwareDeployment
    condition: contrail_cacert_provided
    properties:
      name: ContrailCaCertDeployment
      config: {get_resource: ContrailTlsInjectConfig}
      server: {get_param: server}
      input_values:
        path: {get_param: ContrailCaCertFile}
        content: {get_param: ContrailCaCert}
        mode: '0444'

  ContrailCaKeyDeployment:
    type: OS::Heat::SoftwareDeployment
    condition: contrail_cakey_provided
    properties:
      name: ContrailCaKeyDeployment
      config: {get_resource: ContrailTlsInjectConfig}
      server: {get_param: server}
      input_values:
        path: {get_param: ContrailCaKeyFile}
        content: {get_param: ContrailCaKey}
        mode: '0400'

outputs:
  cert_md5sum:
    condition: contrail_cert_provided
    value: {get_attr: [ContrailCertDeployment, md5sum]}
  key_md5sum:
    condition: contrail_cert_provided
    value: {get_attr: [ContrailKeyDeployment, md5sum]}
  cacert_md5sum:
    condition: contrail_cacert_provided
    value: {get_attr: [ContrailCaCertDeployment, md5sum]}
  cakey_md5sum:
    condition: contrail_cakey_provided
    value: {get_attr: [ContrailCaKeyDeployment, md5sum]}

